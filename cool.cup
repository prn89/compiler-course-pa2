/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;
nonterminal Feature feature;
nonterminal formalc formal;
nonterminal Expression expr;
nonterminal Expressions expr_list;
nonterminal Expressions block_list;
nonterminal Formals formal_list;
nonterminal Case case;
nonterminal Cases case_list;


/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
        | feature:f SEMI dummy_feature_list:fl
	    {: RESULT = fl.appendElement(f); :}
	;

feature ::= OBJECTID:name LPAREN formal_list:fl RPAREN COLON TYPEID:type LBRACE expr:e RBRACE
            {: RESULT = new method(curr_lineno(), name, fl, type, e); :}
        | OBJECTID:name COLON TYPEID:type
            /* default init everything to void */
            /* TODO: make sure Bool defaults to false */
            {: RESULT = new attr(curr_lineno(), name, type, new no_expr(curr_lineno())); :}
        | OBJECTID:name COLON TYPEID:type ASSIGN expr:value
            {: RESULT = new attr(curr_lineno(), name, type, value); :}
        ;

formal ::= OBJECTID:name COLON TYPEID:type
           {: RESULT = new formalc(curr_lineno(), name, type); :}
       ;

formal_list ::= /* empty */
                {: RESULT = new Formals(curr_lineno()); :}
            | formal:f COMMA formal_list:fl
                {: RESULT = fl.appendElement(f); :}
            ;

expr_list ::= /* empty */
              {: RESULT = new Expressions(curr_lineno()); :}
          | expr:e COMMA expr_list:el
              {: RESULT = el.appendElement(e); :}
          ;

block_list ::= expr:e SEMI
               {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
           | block_list:bl expr:e
               {: RESULT = bl.appendElement(e); :}
           ;

case ::= OBJECTID COLON TYPEID DARROW expr SEMI
     ;

case_list ::= case
            | case_list case
            ;
/*
let_id ::= ID COLON TYPE
       | ID COLON  TYPE ASSIGN expr
       ;

let_id_list ::= let_id
            | let_id COMMA let_id_list
            ;
*/

expr ::= OBJECTID ASSIGN expr
     /* dispatch */
     | expr DOT OBJECTID LPAREN expr_list RPAREN
     | expr AT TYPEID DOT OBJECTID LPAREN expr_list RPAREN
     /* function call? */
     | OBJECTID LPAREN expr_list RPAREN
     | IF expr THEN expr ELSE expr FI
     | WHILE expr LOOP expr POOL
     | LBRACE block_list RBRACE
     /* complicated */

   /*| LET let_id_list OBJECTID COLON TYPEID [ ASSIGN expr ] IN expr*/
   /*| LET let_id_list:outer IN expr:body */
/*
     | LET OBJECTID:name COLON TYPEID:type ASSIGN expr:init IN expr:body
         {: RESULT = new let(curr_lineno(), name, type, init, body); :}
     | LET OBJECTID:name COLON TYPEID:type IN expr:body
         {: RESULT = new let(curr_lineno(), name, type, new no_expr(curr_lineno()), body); :}
*/
     | CASE expr OF case_list ESAC
     | NEW TYPEID
     | ISVOID expr
     | expr PLUS expr
     | expr MINUS expr
     | expr MULT expr
     | expr DIV expr
     | NEG expr
     | expr LT expr
     | expr LE expr
     | expr EQ expr
     | NOT expr
     | LPAREN expr RPAREN
     | OBJECTID
     | INT_CONST
     | STR_CONST
     | BOOL_CONST
     ;